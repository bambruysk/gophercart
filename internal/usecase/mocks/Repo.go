// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "gophercart/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

type Repo_Expecter struct {
	mock *mock.Mock
}

func (_m *Repo) EXPECT() *Repo_Expecter {
	return &Repo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, userID, good
func (_m *Repo) Create(ctx context.Context, userID models.User, good models.Good) error {
	ret := _m.Called(ctx, userID, good)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User, models.Good) error); ok {
		r0 = rf(ctx, userID, good)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - userID models.User
//  - good models.Good
func (_e *Repo_Expecter) Create(ctx interface{}, userID interface{}, good interface{}) *Repo_Create_Call {
	return &Repo_Create_Call{Call: _e.mock.On("Create", ctx, userID, good)}
}

func (_c *Repo_Create_Call) Run(run func(ctx context.Context, userID models.User, good models.Good)) *Repo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User), args[2].(models.Good))
	})
	return _c
}

func (_c *Repo_Create_Call) Return(_a0 error) *Repo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: ctx, userID, good
func (_m *Repo) Delete(ctx context.Context, userID models.User, good models.Good) error {
	ret := _m.Called(ctx, userID, good)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User, models.Good) error); ok {
		r0 = rf(ctx, userID, good)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - userID models.User
//  - good models.Good
func (_e *Repo_Expecter) Delete(ctx interface{}, userID interface{}, good interface{}) *Repo_Delete_Call {
	return &Repo_Delete_Call{Call: _e.mock.On("Delete", ctx, userID, good)}
}

func (_c *Repo_Delete_Call) Run(run func(ctx context.Context, userID models.User, good models.Good)) *Repo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User), args[2].(models.Good))
	})
	return _c
}

func (_c *Repo_Delete_Call) Return(_a0 error) *Repo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteCart provides a mock function with given fields: ctx, cart
func (_m *Repo) DeleteCart(ctx context.Context, cart models.Cart) error {
	ret := _m.Called(ctx, cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Cart) error); ok {
		r0 = rf(ctx, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_DeleteCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCart'
type Repo_DeleteCart_Call struct {
	*mock.Call
}

// DeleteCart is a helper method to define mock.On call
//  - ctx context.Context
//  - cart models.Cart
func (_e *Repo_Expecter) DeleteCart(ctx interface{}, cart interface{}) *Repo_DeleteCart_Call {
	return &Repo_DeleteCart_Call{Call: _e.mock.On("DeleteCart", ctx, cart)}
}

func (_c *Repo_DeleteCart_Call) Run(run func(ctx context.Context, cart models.Cart)) *Repo_DeleteCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Cart))
	})
	return _c
}

func (_c *Repo_DeleteCart_Call) Return(_a0 error) *Repo_DeleteCart_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsNotFound provides a mock function with given fields: err
func (_m *Repo) IsNotFound(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Repo_IsNotFound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNotFound'
type Repo_IsNotFound_Call struct {
	*mock.Call
}

// IsNotFound is a helper method to define mock.On call
//  - err error
func (_e *Repo_Expecter) IsNotFound(err interface{}) *Repo_IsNotFound_Call {
	return &Repo_IsNotFound_Call{Call: _e.mock.On("IsNotFound", err)}
}

func (_c *Repo_IsNotFound_Call) Run(run func(err error)) *Repo_IsNotFound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Repo_IsNotFound_Call) Return(_a0 bool) *Repo_IsNotFound_Call {
	_c.Call.Return(_a0)
	return _c
}

// List provides a mock function with given fields: ctx, userID
func (_m *Repo) List(ctx context.Context, userID models.User) ([]models.Good, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.Good
	if rf, ok := ret.Get(0).(func(context.Context, models.User) []models.Good); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Good)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Repo_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - ctx context.Context
//  - userID models.User
func (_e *Repo_Expecter) List(ctx interface{}, userID interface{}) *Repo_List_Call {
	return &Repo_List_Call{Call: _e.mock.On("List", ctx, userID)}
}

func (_c *Repo_List_Call) Run(run func(ctx context.Context, userID models.User)) *Repo_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *Repo_List_Call) Return(_a0 []models.Good, _a1 error) *Repo_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepo(t mockConstructorTestingTNewRepo) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
