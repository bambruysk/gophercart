// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "gophercart/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Warehouse is an autogenerated mock type for the Warehouse type
type Warehouse struct {
	mock.Mock
}

type Warehouse_Expecter struct {
	mock *mock.Mock
}

func (_m *Warehouse) EXPECT() *Warehouse_Expecter {
	return &Warehouse_Expecter{mock: &_m.Mock}
}

// CheckGood provides a mock function with given fields: ctx, good
func (_m *Warehouse) CheckGood(ctx context.Context, good models.Good) (int, error) {
	ret := _m.Called(ctx, good)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, models.Good) int); ok {
		r0 = rf(ctx, good)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Good) error); ok {
		r1 = rf(ctx, good)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Warehouse_CheckGood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckGood'
type Warehouse_CheckGood_Call struct {
	*mock.Call
}

// CheckGood is a helper method to define mock.On call
//  - ctx context.Context
//  - good models.Good
func (_e *Warehouse_Expecter) CheckGood(ctx interface{}, good interface{}) *Warehouse_CheckGood_Call {
	return &Warehouse_CheckGood_Call{Call: _e.mock.On("CheckGood", ctx, good)}
}

func (_c *Warehouse_CheckGood_Call) Run(run func(ctx context.Context, good models.Good)) *Warehouse_CheckGood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Good))
	})
	return _c
}

func (_c *Warehouse_CheckGood_Call) Return(count int, err error) *Warehouse_CheckGood_Call {
	_c.Call.Return(count, err)
	return _c
}

// DeliveryGood provides a mock function with given fields: ctx, good
func (_m *Warehouse) DeliveryGood(ctx context.Context, good models.Good) error {
	ret := _m.Called(ctx, good)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Good) error); ok {
		r0 = rf(ctx, good)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Warehouse_DeliveryGood_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeliveryGood'
type Warehouse_DeliveryGood_Call struct {
	*mock.Call
}

// DeliveryGood is a helper method to define mock.On call
//  - ctx context.Context
//  - good models.Good
func (_e *Warehouse_Expecter) DeliveryGood(ctx interface{}, good interface{}) *Warehouse_DeliveryGood_Call {
	return &Warehouse_DeliveryGood_Call{Call: _e.mock.On("DeliveryGood", ctx, good)}
}

func (_c *Warehouse_DeliveryGood_Call) Run(run func(ctx context.Context, good models.Good)) *Warehouse_DeliveryGood_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Good))
	})
	return _c
}

func (_c *Warehouse_DeliveryGood_Call) Return(_a0 error) *Warehouse_DeliveryGood_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewWarehouse interface {
	mock.TestingT
	Cleanup(func())
}

// NewWarehouse creates a new instance of Warehouse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWarehouse(t mockConstructorTestingTNewWarehouse) *Warehouse {
	mock := &Warehouse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
